version: "3.9"

services:
  db-master:
    image: postgres:16-alpine
    container_name: postgres-master
    environment:
      POSTGRES_DB: vertrieb
      POSTGRES_USER: vertrieb
      POSTGRES_PASSWORD: vertrieb
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator123
    volumes:
      - db_master_data:/var/lib/postgresql/data
      - ./postgres-master.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba_master.conf:/etc/postgresql/pg_hba.conf:ro
      - ./init-replication.sql:/docker-entrypoint-initdb.d/init-replication.sql:ro
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vertrieb -d vertrieb"]
      interval: 5s
      timeout: 5s
      retries: 10

  db-slave:
    image: postgres:16-alpine
    container_name: postgres-slave
    environment:
      POSTGRES_DB: vertrieb
      POSTGRES_USER: vertrieb
      POSTGRES_PASSWORD: vertrieb
      PGUSER: postgres
    volumes:
      - db_slave_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Anderer Port für Slave
    depends_on:
      db-master:
        condition: service_healthy
    command: >
      bash -c "
      echo 'Setting up PostgreSQL slave...';
      until pg_isready -h db-master -p 5432; do
        echo 'Waiting for master...';
        sleep 2;
      done;
      rm -rf /var/lib/postgresql/data/*;
      PGPASSWORD=replicator123 pg_basebackup -h db-master -D /var/lib/postgresql/data -U replicator -v -P -W;
      echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf;
      echo 'primary_conninfo = host=db-master port=5432 user=replicator password=replicator123' >> /var/lib/postgresql/data/recovery.conf;
      echo 'trigger_file = /tmp/postgresql.trigger.5432' >> /var/lib/postgresql/data/recovery.conf;
      postgres;
      "

  app:
    build: .
    depends_on:
      db-master:
        condition: service_healthy
    environment:
      ENTRA_TENANT_ID: ${ENTRA_TENANT_ID}
      ENTRA_CLIENT_ID: ${ENTRA_CLIENT_ID}
      ENTRA_CLIENT_SECRET: ${ENTRA_CLIENT_SECRET}
      OAUTH_REDIRECT_URI: ${OAUTH_REDIRECT_URI}
      SESSION_SECRET: ${SESSION_SECRET}
      # Master DB für Write-Operations
      DATABASE_URL: postgresql+psycopg2://vertrieb:vertrieb@db-master:5432/vertrieb
      # Slave DB für Read-Operations (optional)
      DATABASE_READ_URL: postgresql+psycopg2://vertrieb:vertrieb@db-slave:5432/vertrieb
      CUSTOMERS_CSV_PATH: ${CUSTOMERS_CSV_PATH}
      DEFAULT_LOCALE: ${DEFAULT_LOCALE}
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--proxy-headers"]

  # Backup Service für zusätzliche Sicherheit
  backup-service:
    image: postgres:16-alpine
    container_name: postgres-backup
    depends_on:
      - db-master
    volumes:
      - ./backups:/backups
    environment:
      PGPASSWORD: vertrieb
    command: >
      sh -c "
      while true; do
        sleep 3600;
        echo 'Creating hourly backup...';
        pg_dump -h db-master -U vertrieb vertrieb > /backups/hourly-backup-$$(date +%Y%m%d_%H%M%S).sql;
        find /backups -name 'hourly-backup-*.sql' -mtime +1 -delete;
      done
      "

volumes:
  db_master_data:
  db_slave_data:
